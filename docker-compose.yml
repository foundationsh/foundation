services:
  # Reverse Proxy
  proxy-service:
    hostname: "proxy-service"
    ports:
      - "80:80"
    image: nginx:latest
    #build:
    #  context: ./src
    #  dockerfile: ./Reality.Services.Proxy/Dockerfile
    volumes:
      - /etc/nginx:/etc/nginx
    depends_on:
      - gateway-service

  # Portfolio Front-end
  portfolio-app-service:
    hostname: "portfolio-app-service"
    ports:
      - "8080:8080"
    expose:
      - "8080"
    build:
      context: ./src
      dockerfile: ./Portfolio/Dockerfile
    depends_on:
      - gateway-service

  # Reality API Gateway
  gateway-service:
    hostname: "gateway-service"
    build:
      context: ./src
      dockerfile: ./Reality.Services.Gateway/Dockerfile
    ports:
      - "4000:80"
    expose:
      - "80"
    env_file:
      - .env
    environment:
      - SERVICE_URLS=http://identity-service,http://upx-service,http://portfolio-service
    depends_on:
      - identity-service
      - upx-service
      - portfolio-service

  # Reality API Microservices
  identity-service:
    hostname: "identity-service"
    build:
      context: ./src
      dockerfile: ./Reality.Services.Identity/Dockerfile
    env_file:
      - .env
    environment:
      - DatabaseName=Identity
    depends_on:
      - db

  upx-service:
    hostname: "upx-service"
    build:
      context: ./src
      dockerfile: ./Reality.Services.UPx/Dockerfile
    env_file:
      - .env
    environment:
      - DatabaseName=UPx
    depends_on:
      - db

  static-service:
    hostname: "static-service"
    build:
      context: ./src
      dockerfile: ./Reality.Services.Static/Dockerfile
    env_file:
      - .env
    environment:
      - DatabaseName=Static
    volumes:
      - static:/etc/reality/static/files
    depends_on:
      - db

  portfolio-service:
    hostname: "portfolio-service"
    build:
      context: ./src
      dockerfile: ./Reality.Services.Portfolio/Dockerfile
    env_file:
      - .env
    environment:
      - DatabaseName=Portfolio
    depends_on:
      - db

  # Databases
  db:
    hostname: "db"
    image: mongo
    restart: always
    expose:
      - "27017"
    ports:
      - "27017:27017"
    volumes:
      - /data/db:/data/db

volumes:
  static:
